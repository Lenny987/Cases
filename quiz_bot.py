import json
import logging
import nest_asyncio
import sqlite3
import uuid
import os
from telegram import BotCommand
from datetime import datetime
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputMediaPhoto
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    JobQueue
)

nest_asyncio.apply()


TOKEN = "—É–±—Ä–∞–ª –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
POLLS_FILE = "/data/polls.json"
DATABASE_FILE = "/data/bot_database.db"
MEDIA_FOLDER = "/data/media"
ADMIN_ID = 724558868  #Telegram ID

os.makedirs(MEDIA_FOLDER, exist_ok=True)

TITLE, QUESTION, QUESTION_IMAGE, OPTIONS, NEXT_QUESTION, RESULTS, RESULT_IMAGE, CONFIRM = range(8)
EDIT_CHOICE, EDIT_TITLE, EDIT_QUESTIONS, EDIT_QUESTION, EDIT_OPTIONS, EDIT_RESULTS = range(8, 14)
AWAITING_MESSAGE, AWAITING_TIME = range(14, 16)
SHARE_POLL, SHARE_WITH_IMAGE = range(16, 18)

polls_data = {"polls": {}}
user_sessions = {}

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def save_file(file_id: str, context: ContextTypes.DEFAULT_TYPE, file_type: str = "photo") -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –∏–∑ Telegram –Ω–∞ –¥–∏—Å–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞"""
    try:
        file = await context.bot.get_file(file_id)
        ext = "jpg" if file_type == "photo" else "mp4" if file_type == "video" else "bin"
        filename = f"{file_id}.{ext}"
        filepath = os.path.join(MEDIA_FOLDER, filename)
        
        await file.download_to_drive(filepath)
        return filename
    except Exception as e:
        logger.error(f"Error saving file: {e}")
        return None

async def check_media_files(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç file_id –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    for poll_id, poll in polls_data["polls"].items():
        
        for question in poll.get("questions", []):
            if "image" in question and isinstance(question["image"], dict):
                filepath = os.path.join(MEDIA_FOLDER, question["image"]["local_path"])
                if not os.path.exists(filepath):
                    try:
                        
                        file = await context.bot.get_file(question["image"]["file_id"])
                        question["image"]["local_path"] = await save_file(file.file_id, context)
                    except Exception as e:
                        logger.error(f"Failed to restore image: {e}")
                        question.pop("image", None)
        
        
        if "result_images" in poll:
            for result_name, image_data in list(poll["result_images"].items()):
                if isinstance(image_data, dict):
                    filepath = os.path.join(MEDIA_FOLDER, image_data["local_path"])
                    if not os.path.exists(filepath):
                        try:
                            file = await context.bot.get_file(image_data["file_id"])
                            image_data["local_path"] = await save_file(file.file_id, context)
                        except Exception as e:
                            logger.error(f"Failed to restore result image: {e}")
                            poll["result_images"].pop(result_name, None)

def init_db():
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        registration_date TEXT
    )
    ''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS scheduled_posts (
        post_id INTEGER PRIMARY KEY AUTOINCREMENT,
        content_type TEXT,
        content_text TEXT,
        content_file_id TEXT,
        scheduled_time TEXT,
        status TEXT DEFAULT 'pending'
    )
    ''')
    
    conn.commit()
    conn.close()

def add_user(user_id, username, first_name, last_name):
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    
    cursor.execute('''
    INSERT OR IGNORE INTO users (user_id, username, first_name, last_name, registration_date)
    VALUES (?, ?, ?, ?, datetime('now'))
    ''', (user_id, username, first_name, last_name))
    
    conn.commit()
    conn.close()

def get_all_users():
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    
    cursor.execute('SELECT user_id FROM users')
    users = [row[0] for row in cursor.fetchall()]
    
    conn.close()
    return users

def add_scheduled_post(content_type, content_text, content_file_id, scheduled_time):
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    
    cursor.execute('''
    INSERT INTO scheduled_posts (content_type, content_text, content_file_id, scheduled_time)
    VALUES (?, ?, ?, ?)
    ''', (content_type, content_text, content_file_id, scheduled_time))
    
    post_id = cursor.lastrowid
    conn.commit()
    conn.close()
    return post_id

def get_pending_posts():
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT post_id, content_type, content_text, content_file_id, scheduled_time 
    FROM scheduled_posts 
    WHERE status = 'pending'
    ''')
    
    posts = [{
        'post_id': row[0],
        'content_type': row[1],
        'content_text': row[2],
        'content_file_id': row[3],
        'scheduled_time': row[4]
    } for row in cursor.fetchall()]
    
    conn.close()
    return posts

def mark_post_as_sent(post_id):
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    
    cursor.execute('''
    UPDATE scheduled_posts 
    SET status = 'sent' 
    WHERE post_id = ?
    ''', (post_id,))
    
    conn.commit()
    conn.close()

def load_polls():
    global polls_data
    try:
        with open(POLLS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            if isinstance(data, dict) and "polls" in data and isinstance(data["polls"], dict):
                polls_data = data
            else:
                polls_data = {"polls": {}}
    except (FileNotFoundError, json.JSONDecodeError):
        polls_data = {"polls": {}}

async def save_polls(context: ContextTypes.DEFAULT_TYPE):
    try:

        await check_media_files(context)

        with open(POLLS_FILE, "w", encoding="utf-8") as f:
            json.dump(polls_data, f, indent=2, ensure_ascii=False)
    except Exception as e:
        logger.error(f"Error saving polls: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        add_user(user.id, user.username, user.first_name, user.last_name)
        
        args = context.args if hasattr(context, "args") else []
        if args and args[0].startswith("startpoll_"):
            poll_id = args[0][10:]
            if poll_id not in polls_data["polls"]:
                await update.message.reply_text("‚ö†Ô∏è –û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            user_sessions[user.id] = {
                "poll_session": {
                    "poll_id": poll_id,
                    "score": 0,
                    "current_q": 0,
                    "answers": []
                },
                "last_message_id": None
            }
            await send_poll_question(update, context)
            return

        keyboard = [
            [InlineKeyboardButton("üìä –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å", callback_data="list_polls")],
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="create_poll")],
            [InlineKeyboardButton("üóÇÔ∏è –ú–æ–∏ –æ–ø—Ä–æ—Å—ã", callback_data="my_polls")]
        ]

        if update.message:
            await update.message.reply_text(
                "üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤!</b> üåü\n\n"
                "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ üéØ –ü—Ä–æ—Ö–æ–¥–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã\n"
                "‚Ä¢ üõ†Ô∏è –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ –æ–ø—Ä–æ—Å—ã\n"
                "‚Ä¢ üì§ –î–µ–ª–∏—Ç—å—Å—è –æ–ø—Ä–æ—Å–∞–º–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å –¥—Ä—É–∑—å—è–º–∏",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="HTML"
            )
    
        else:
            await update.callback_query.edit_message_text(
                "üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤!</b> üåü\n\n"
                "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ üéØ –ü—Ä–æ—Ö–æ–¥–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã\n"
                "‚Ä¢ üõ†Ô∏è –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ –æ–ø—Ä–æ—Å—ã\n"
                "‚Ä¢ üì§ –î–µ–ª–∏—Ç—å—Å—è –æ–ø—Ä–æ—Å–∞–º–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å –¥—Ä—É–∑—å—è–º–∏",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="HTML"
            )
            await update.callback_query.answer()
    except Exception as e:
        logger.error(f"Error in start: {e}")
        await handle_error(update, context)

async def handle_error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.callback_query:
            await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", show_alert=True)
        else:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
    except:
        pass

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="home")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)

async def set_commands(application: Application):
    commands = [
        BotCommand(command="/menu", description="–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    ]
    await application.bot.set_my_commands(commands)

async def create_poll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        user_sessions[user_id] = {
            "current_poll": {"questions": [], "creator": user_id},
            "last_message_id": None,
            "state": TITLE
        }

        await update.callback_query.answer()
        msg = await update.callback_query.edit_message_text(
            "üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞, –¥–æ–±–∞–≤—å—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —è—Ä–∫–æ—Å—Ç–∏:</b>",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_poll")]
            ]),
            parse_mode="HTML"
        )
        user_sessions[user_id]["last_message_id"] = msg.message_id
        return TITLE
    except Exception as e:
        logger.error(f"Error in create_poll: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def process_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        if user_id not in user_sessions:
            await update.message.reply_text("üö´ –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
            return ConversationHandler.END

        title = update.message.text.strip()
        if len(title) > 40:
            await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ! –ú–∞–∫—Å–∏–º—É–º 40 —Å–∏–º–≤–æ–ª–æ–≤.")
            return TITLE

        user_sessions[user_id]["current_poll"]["title"] = title
        user_sessions[user_id]["question_number"] = 1

        msg = await update.message.reply_text(
            f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞:</b> {title}\n\n"
            "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç <b>1-–≥–æ –≤–æ–ø—Ä–æ—Å–∞</b>:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_poll")]
            ]),
            parse_mode="HTML"
        )
        user_sessions[user_id]["last_message_id"] = msg.message_id
        return QUESTION
    except Exception as e:
        logger.error(f"Error in process_title: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def process_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        if user_id not in user_sessions:
            await update.message.reply_text("üö´ –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
            return ConversationHandler.END

        q_text = update.message.text.strip()
        if len(q_text) > 1000:
            await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
            return QUESTION

        q_num = user_sessions[user_id]["question_number"]
        user_sessions[user_id]["current_question"] = {"text": q_text, "options": []}

        msg = await update.message.reply_text(
            f"üìù <b>–í–æ–ø—Ä–æ—Å {q_num}:</b> {q_text}\n\n"
            "üñºÔ∏è <i>–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É?</i>",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_image")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_poll")]
            ]),
            parse_mode="HTML"
        )
        user_sessions[user_id]["last_message_id"] = msg.message_id
        return QUESTION_IMAGE
    except Exception as e:
        logger.error(f"Error in process_question: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def process_question_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        if user_id not in user_sessions:
            await update.callback_query.answer("üö´ –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞", show_alert=True)
            return ConversationHandler.END

        if update.callback_query and update.callback_query.data == "skip_image":
            await update.callback_query.answer()
        elif update.message and update.message.photo:
            photo = max(update.message.photo, key=lambda p: p.file_size)
            filename = await save_file(photo.file_id, context)
            if filename:
                user_sessions[user_id]["current_question"]["image"] = {
                    "file_id": photo.file_id,
                    "local_path": filename
                }

        q_num = user_sessions[user_id]["question_number"]

        await context.bot.delete_message(
            chat_id=update.effective_chat.id,
            message_id=user_sessions[user_id]["last_message_id"]
        )

        msg = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚ûï <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {q_num}:</b>\n\n"
                 "–§–æ—Ä–º–∞—Ç: <code>–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞|–ë–∞–ª–ª—ã</code>\n"
                 "–ü—Ä–∏–º–µ—Ä:\n<code>–î–∞|2\n–ù–µ—Ç|-1\n–ù–µ –∑–Ω–∞—é|0</code>\n\n"
                 "üî¢ –ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (–æ—Ç 2 –¥–æ 10 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_poll")]
            ]),
            parse_mode="HTML"
        )
        user_sessions[user_id]["last_message_id"] = msg.message_id
        return OPTIONS
    except Exception as e:
        logger.error(f"Error in process_question_image: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def process_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        if user_id not in user_sessions:
            await update.message.reply_text("üö´ –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
            return ConversationHandler.END

        options = []
        for line in update.message.text.split("\n"):
            if line.strip() and "|" in line:
                text, weight = line.split("|", 1)
                options.append({"text": text.strip(), "weight": int(weight.strip())})

        if len(options) < 2:
            raise ValueError("‚ùï –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞")
        if len(options) > 10:
            raise ValueError("‚ùï –ú–∞–∫—Å–∏–º—É–º 10 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞")

        user_sessions[user_id]["current_question"]["options"] = options
        current_poll = user_sessions[user_id]["current_poll"]
        current_poll["questions"].append(user_sessions[user_id]["current_question"].copy())

        q_num = user_sessions[user_id]["question_number"]
        q_count = len(current_poll["questions"])

        keyboard = []
        if q_count < 30:
            keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="next_question")])

        if q_count >= 4:
            keyboard.append([InlineKeyboardButton("‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="to_results")])
        else:
            keyboard.append([InlineKeyboardButton(f"üî¢ –ù—É–∂–Ω–æ –µ—â—ë {4-q_count} –≤–æ–ø—Ä–æ—Å–æ–≤ (–º–∏–Ω–∏–º—É–º 4)", callback_data="need_more_questions")])

        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="cancel_poll")])

        question = user_sessions[user_id]["current_question"]
        message_text = (
            f"‚úÖ <b>–í–æ–ø—Ä–æ—Å {q_num} –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n"
            f"üìä –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {q_count}\n\n"
            f"‚ÑπÔ∏è {'–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã' if q_count < 30 else '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –≤–æ–ø—Ä–æ—Å–æ–≤ (30)'}"
        )

        await context.bot.delete_message(
            chat_id=update.effective_chat.id,
            message_id=user_sessions[user_id]["last_message_id"]
        )

        if "image" in question:
            filepath = os.path.join(MEDIA_FOLDER, question["image"]["local_path"])
            if os.path.exists(filepath):
                msg = await context.bot.send_photo(
                    chat_id=update.effective_chat.id,
                    photo=question["image"]["file_id"],
                    caption=message_text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="HTML"
                )
            else:
                msg = await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=message_text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="HTML"
                )
        else:
            msg = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=message_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="HTML"
            )

        user_sessions[user_id]["last_message_id"] = msg.message_id
        return NEXT_QUESTION

    except ValueError as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return OPTIONS
    except Exception as e:
        logger.error(f"Error in process_options: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def need_more_questions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        if user_id not in user_sessions:
            await update.callback_query.answer("üö´ –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞", show_alert=True)
            return ConversationHandler.END

        current_poll = user_sessions[user_id]["current_poll"]
        q_count = len(current_poll["questions"])
        needed = 4 - q_count

        await update.callback_query.answer(
            f"‚ùï –ù—É–∂–Ω–æ –µ—â—ë {needed} –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è!",
            show_alert=True
        )
        return NEXT_QUESTION
    except Exception as e:
        logger.error(f"Error in need_more_questions: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def next_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        if user_id not in user_sessions:
            await update.callback_query.answer("üö´ –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞", show_alert=True)
            return ConversationHandler.END

        user_sessions[user_id]["question_number"] += 1
        q_num = user_sessions[user_id]["question_number"]

        await update.callback_query.answer()

        await context.bot.delete_message(
            chat_id=update.effective_chat.id,
            message_id=user_sessions[user_id]["last_message_id"]
        )

        msg = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç <b>{q_num}-–≥–æ –≤–æ–ø—Ä–æ—Å–∞</b>:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_poll")]
            ]),
            parse_mode="HTML"
        )
        user_sessions[user_id]["last_message_id"] = msg.message_id
        return QUESTION
    except Exception as e:
        logger.error(f"Error in next_question: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def to_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        if user_id not in user_sessions:
            await update.callback_query.answer("üö´ –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞", show_alert=True)
            return ConversationHandler.END

        current_poll = user_sessions[user_id]["current_poll"]
        q_count = len(current_poll["questions"])

        min_score = sum(min(opt["weight"] for opt in q["options"]) for q in current_poll["questions"])
        max_score = sum(max(opt["weight"] for opt in q["options"]) for q in current_poll["questions"])

        max_results = min(4 * ((q_count // 5) + 1), 12)

        await update.callback_query.answer()

        await context.bot.delete_message(
            chat_id=update.effective_chat.id,
            message_id=user_sessions[user_id]["last_message_id"]
        )

        msg = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=(
                f"üìä <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞</b>\n\n"
                f"‚ÑπÔ∏è –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç 1 –¥–æ {max_results} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.\n"
                f"–§–æ—Ä–º–∞—Ç: <code>–ù–∞–∑–≤–∞–Ω–∏–µ|–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª</code>\n\n"
                f"–ü—Ä–∏–º–µ—Ä:\n<code>–û—Ç–ª–∏—á–Ω–æ|15\n–•–æ—Ä–æ—à–æ|10\n–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ|5</code>\n\n"
                f"‚ÑπÔ∏è –î–∏–∞–ø–∞–∑–æ–Ω –≤–æ–∑–º–æ–∂–Ω—ã—Ö –±–∞–ª–ª–æ–≤: –æ—Ç {min_score} –¥–æ {max_score}"
            ),
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_poll")]
            ]),
            parse_mode="HTML"
        )
        user_sessions[user_id]["last_message_id"] = msg.message_id
        user_sessions[user_id]["max_results"] = max_results
        user_sessions[user_id]["min_score"] = min_score
        user_sessions[user_id]["max_score"] = max_score
        return RESULTS
    except Exception as e:
        logger.error(f"Error in to_results: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def process_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        if user_id not in user_sessions:
            await update.message.reply_text("üö´ –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
            return ConversationHandler.END

        thresholds = []
        for line in update.message.text.split("\n"):
            if line.strip() and "|" in line:
                name, score = line.split("|", 1)
                thresholds.append((name.strip(), int(score.strip())))

        max_results = user_sessions[user_id]["max_results"]
        min_score = user_sessions[user_id]["min_score"]
        max_score = user_sessions[user_id]["max_score"]

        if len(thresholds) < 1:
            raise ValueError(f"‚ùï –ù—É–∂–Ω–æ 1 —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        if len(thresholds) > max_results:
            raise ValueError(f"‚ùï –ú–∞–∫—Å–∏–º—É–º {max_results} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        thresholds.sort(key=lambda x: x[1], reverse=True)

        if thresholds[0][1] > max_score:
            raise ValueError(f"‚ùï –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ {thresholds[0][1]} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–π –º–∞–∫—Å–∏–º—É–º {max_score}")
        if thresholds[-1][1] < min_score:
            raise ValueError(f"‚ùï –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ {thresholds[-1][1]} –Ω–∏–∂–µ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞ {min_score}")

        for i in range(1, len(thresholds)):
            if thresholds[i-1][1] <= thresholds[i][1]:
                raise ValueError("‚ùï –ü–æ—Ä–æ–≥–∏ –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –≤ —É–±—ã–≤–∞—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ")

        if thresholds[-1][1] > min_score:
            thresholds.append(("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç", min_score))

        user_sessions[user_id]["current_poll"]["thresholds"] = thresholds
        user_sessions[user_id]["result_images"] = {}
        user_sessions[user_id]["current_result"] = 0
        user_sessions[user_id]["result_names"] = [name for name, score in thresholds]

        await context.bot.delete_message(
            chat_id=update.effective_chat.id,
            message_id=user_sessions[user_id]["last_message_id"]
        )

        msg = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=(
                "üñºÔ∏è <b>–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤?</b>\n\n"
                f"–°–µ–π—á–∞—Å: {user_sessions[user_id]['result_names'][0]}\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'"
            ),
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_result_image")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_poll")]
            ]),
            parse_mode="HTML"
        )
        user_sessions[user_id]["last_message_id"] = msg.message_id
        return RESULT_IMAGE
    except ValueError as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return RESULTS
    except Exception as e:
        logger.error(f"Error in process_results: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def process_result_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        if user_id not in user_sessions:
            await update.callback_query.answer("üö´ –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞", show_alert=True)
            return ConversationHandler.END

        if update.callback_query and update.callback_query.data == "skip_result_image":
            await update.callback_query.answer()
        elif update.message and update.message.photo:
            photo = max(update.message.photo, key=lambda p: p.file_size)
            current_result = user_sessions[user_id]["current_result"]
            result_name = user_sessions[user_id]["result_names"][current_result]
            filename = await save_file(photo.file_id, context)
            if filename:
                user_sessions[user_id]["result_images"][result_name] = {
                    "file_id": photo.file_id,
                    "local_path": filename
                }

        user_sessions[user_id]["current_result"] += 1
        current_result = user_sessions[user_id]["current_result"]
        result_names = user_sessions[user_id]["result_names"]

        await context.bot.delete_message(
            chat_id=update.effective_chat.id,
            message_id=user_sessions[user_id]["last_message_id"]
        )

        if current_result < len(result_names):
            next_result = result_names[current_result]
            msg = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=(
                    f"üñºÔ∏è <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:</b>\n\n"
                    f"–°–µ–π—á–∞—Å: {next_result}\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'"
                ),
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_result_image")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_poll")]
                ]),
                parse_mode="HTML"
            )
            user_sessions[user_id]["last_message_id"] = msg.message_id
            return RESULT_IMAGE
        else:
            current_poll = user_sessions[user_id]["current_poll"]
            result_images = user_sessions[user_id]["result_images"]
            current_poll["result_images"] = result_images

            summary = (
                f"üìã <b>–°–≤–æ–¥–∫–∞ –ø–æ –æ–ø—Ä–æ—Å—É:</b>\n\n"
                f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {current_poll['title']}\n"
                f"üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤:</b> {len(current_poll['questions'])}\n"
                f"üìä <b>–î–∏–∞–ø–∞–∑–æ–Ω –±–∞–ª–ª–æ–≤:</b> –æ—Ç {user_sessions[user_id]['min_score']} –¥–æ {user_sessions[user_id]['max_score']}\n\n"
                f"üèÜ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n" +
                "\n".join(f"‚Ä¢ {name}: –æ—Ç {score} –±–∞–ª–ª–æ–≤" for name, score in current_poll['thresholds'])
            )

            msg = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=summary,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø—Ä–æ—Å", callback_data="save_poll")],
                    [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="cancel_poll")]
                ]),
                parse_mode="HTML"
            )
            user_sessions[user_id]["last_message_id"] = msg.message_id
            return CONFIRM
    except Exception as e:
        logger.error(f"Error in process_result_image: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def save_poll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        if user_id not in user_sessions:
            await update.callback_query.answer("üö´ –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞", show_alert=True)
            return ConversationHandler.END

        poll_id = f"poll_{uuid.uuid4().hex}"  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        polls_data["polls"][poll_id] = user_sessions[user_id]["current_poll"].copy()
        polls_data["polls"][poll_id]["views"] = 0
        await save_polls(context)

        await update.callback_query.answer("‚úÖ –û–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

        await context.bot.delete_message(
            chat_id=update.effective_chat.id,
            message_id=user_sessions[user_id]["last_message_id"]
        )

        bot_username = (await context.bot.get_me()).username
        poll_link = f"https://t.me/{bot_username}?start=startpoll_{poll_id}"

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=(
                "üéâ <b>–û–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {polls_data['polls'][poll_id]['title']}\n"
                f"üî¢ –í–æ–ø—Ä–æ—Å–æ–≤: {len(polls_data['polls'][poll_id]['questions'])}\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–∏–º –æ–ø—Ä–æ—Å–æ–º —Å –¥—Ä—É–∑—å—è–º–∏!"
            ),
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –æ–ø—Ä–æ—Å–æ–º", callback_data=f"share_poll_{poll_id}")],
                [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="main_menu")]
            ]),
            parse_mode="HTML"
        )
        if user_id in user_sessions:
            del user_sessions[user_id]
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in save_poll: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def share_poll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        user_id = query.from_user.id
        poll_id = query.data.split("_", 2)[-1]
        poll = polls_data["polls"].get(poll_id)
        
        if not poll or poll.get("creator") != user_id:
            await query.answer("–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!", show_alert=True)
            return
        
        context.user_data["share_poll"] = {
            "poll_id": poll_id,
            "poll_title": poll["title"],
            "poll_link": f"https://t.me/{(await context.bot.get_me()).username}?start=startpoll_{poll_id}"
        }
        
        await query.answer()
        await query.edit_message_text(
            f"üì§ <b>–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –æ–ø—Ä–æ—Å–æ–º:</b> {poll['title']}\n\n"
            "üñºÔ∏è –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="share_with_image")],
                [InlineKeyboardButton("‚è≠ –ù–µ—Ç, –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="share_without_image")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"my_poll_{poll_id}")]
            ]),
            parse_mode="HTML"
        )
        return SHARE_POLL
    except Exception as e:
        logger.error(f"Error in share_poll: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def share_with_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()
        
        await query.edit_message_text(
            "üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_share")]
            ])
        )
        
        context.user_data["share_poll"]["awaiting_image"] = True
        return SHARE_WITH_IMAGE
    except Exception as e:
        logger.error(f"Error in share_with_image: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def process_share_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not update.message or not update.message.photo:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            return
        
        photo = max(update.message.photo, key=lambda p: p.file_size)
        context.user_data["share_poll"]["image_file_id"] = photo.file_id
        context.user_data["share_poll"]["awaiting_image"] = False
        
        await send_share_message(update, context)
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in process_share_image: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def share_without_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()
        
        await send_share_message(update, context)
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in share_without_image: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def send_share_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        share_data = context.user_data.get("share_poll", {})
        poll_id = share_data.get("poll_id")
        poll_link = share_data.get("poll_link")
        poll_title = share_data.get("poll_title")
        image_file_id = share_data.get("image_file_id")
        
        if not poll_id:
            if hasattr(update, "message"):
                await update.message.reply_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            else:
                await update.callback_query.edit_message_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        message_text = (
            f"üìù <b>{poll_title}</b>\n\n"
            "–Ø —Å–æ–∑–¥–∞–ª(–∞) –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –æ–ø—Ä–æ—Å –≤ <b>Interesting Polls</b>! "
            "–°–∫–æ—Ä–µ–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –∏ –¥–µ–ª–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏! üòÉ\n\n"
            f"üëâ <a href='{poll_link}'>–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø—Ä–æ—Å—É</a>"
        )
        
        try:
            if image_file_id:
                await context.bot.send_photo(
                    chat_id=update.effective_user.id,
                    photo=image_file_id,
                    caption=message_text,
                    parse_mode="HTML"
                )
            else:
                await context.bot.send_message(
                    chat_id=update.effective_user.id,
                    text=message_text,
                    parse_mode="HTML",
                    disable_web_page_preview=True
                )
            
            await context.bot.send_message(
                chat_id=update.effective_user.id,
                text="‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –µ–≥–æ –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –æ–ø—Ä–æ—Å—É", callback_data=f"my_poll_{poll_id}")]
                ])
            )
            
        except Exception as e:
            logger.error(f"Failed to send share message: {e}")
            await context.bot.send_message(
                chat_id=update.effective_user.id,
                text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        
        if "share_poll" in context.user_data:
            del context.user_data["share_poll"]
    except Exception as e:
        logger.error(f"Error in send_share_message: {e}")
        await handle_error(update, context)

async def cancel_share(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        poll_id = context.user_data.get("share_poll", {}).get("poll_id")
        
        if "share_poll" in context.user_data:
            del context.user_data["share_poll"]
        
        await query.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        if poll_id:
            await query.edit_message_text(
                "‚ùå –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –æ–ø—Ä–æ—Å–æ–º –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –æ–ø—Ä–æ—Å—É", callback_data=f"my_poll_{poll_id}")]
                ])
            )
        else:
            await query.edit_message_text(
                "‚ùå –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –æ–ø—Ä–æ—Å–æ–º –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in cancel_share: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def cancel_poll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        if user_id in user_sessions:
            del user_sessions[user_id]

        if update.callback_query:
            await update.callback_query.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            await update.callback_query.edit_message_text(
                "üóëÔ∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.</b>",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="main_menu")]
                ]),
                parse_mode="HTML"
            )
        else:
            await update.message.reply_text(
                "üóëÔ∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.</b>",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="main_menu")]
                ]),
                parse_mode="HTML"
            )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in cancel_poll: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def list_polls(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not polls_data.get("polls") or not isinstance(polls_data["polls"], dict):
            await update.callback_query.answer("üì≠ –ù–µ—Ç –æ–ø—Ä–æ—Å–æ–≤!")
            await update.callback_query.edit_message_text(
                "üì≠ <b>–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.</b>\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –æ–ø—Ä–æ—Å!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="create_poll")],
                    [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="main_menu")]
                ]),
                parse_mode="HTML"
            )
            return

        valid_polls = []
        for pid, poll in polls_data["polls"].items():
            try:
                if isinstance(poll, dict) and "title" in poll and "questions" in poll and isinstance(poll["questions"], list):
                    valid_polls.append((pid, poll))
            except:
                continue

        if not valid_polls:
            await update.callback_query.answer("üì≠ –ù–µ—Ç –æ–ø—Ä–æ—Å–æ–≤!")
            await update.callback_query.edit_message_text(
                "üì≠ <b>–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.</b>\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –æ–ø—Ä–æ—Å!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="create_poll")],
                    [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="main_menu")]
                ]),
                parse_mode="HTML"
            )
            return

        valid_polls.sort(key=lambda x: x[1].get("views", 0), reverse=True)
        top_polls = valid_polls[:50]

        keyboard = [
            [InlineKeyboardButton(
                f"{poll['title']}",
                callback_data=f"start_poll_{pid}"
            )]
            for pid, poll in top_polls
        ]
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])

        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            "üìö <b>–¢–æ–ø-50 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤:</b>",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in list_polls: {e}")
        await handle_error(update, context)

async def start_poll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        poll_id = update.callback_query.data.split("_", 2)[-1]

        if poll_id not in polls_data["polls"]:
            await update.callback_query.answer("‚ö†Ô∏è –û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return

        user_sessions[user_id] = {
            "poll_session": {
                "poll_id": poll_id,
                "score": 0,
                "current_q": 0,
                "answers": []
            },
            "last_message_id": None
        }

        await send_poll_question(update, context)
    except Exception as e:
        logger.error(f"Error in start_poll: {e}")
        await handle_error(update, context)


async def send_poll_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        if user_id not in user_sessions or "poll_session" not in user_sessions[user_id]:
            if hasattr(update, "callback_query") and update.callback_query:
                await update.callback_query.answer("üö´ –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞", show_alert=True)
            return

        poll_id = user_sessions[user_id]["poll_session"]["poll_id"]
        poll = polls_data["polls"][poll_id]
        q_idx = user_sessions[user_id]["poll_session"]["current_q"]
        question = poll["questions"][q_idx]

        options_text = "\n".join(
            f"{idx+1}. {opt['text']}" 
            for idx, opt in enumerate(question["options"]))
        
        keyboard = [
            [InlineKeyboardButton(str(idx+1), callback_data=f"answer_{q_idx}_{idx}")]
            for idx in range(len(question["options"]))
        ]
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ", callback_data="cancel_poll_session")])

        question_text = (
            f"üìä <b>–û–ø—Ä–æ—Å:</b> {poll['title']}\n\n"
            f"üî¢ <b>–í–æ–ø—Ä–æ—Å {q_idx+1}/{len(poll['questions'])}:</b>\n\n"
            f"{question['text']}\n\n"
            f"<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:</b>\n{options_text}"
        )

        if hasattr(update, "callback_query") and update.callback_query:
            try:
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=update.callback_query.message.message_id
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        if "image" in question:
            filepath = os.path.join(MEDIA_FOLDER, question["image"]["local_path"])
            if os.path.exists(filepath):
                try:
                    msg = await context.bot.send_photo(
                        chat_id=update.effective_chat.id,
                        photo=question["image"]["file_id"],
                        caption=question_text,
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
                    msg = await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=question_text,
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode="HTML"
                    )
            else:
                msg = await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=question_text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="HTML"
                )
        else:
            msg = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=question_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="HTML"
            )

        user_sessions[user_id]["last_message_id"] = msg.message_id

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_poll_question: {e}")
        await handle_error(update, context)

            

async def process_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        if user_id not in user_sessions or "poll_session" not in user_sessions[user_id]:
            await update.callback_query.answer("üö´ –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞", show_alert=True)
            return

        query = update.callback_query
        await query.answer()

        data = query.data.split("_")
        q_idx = int(data[1])
        opt_idx = int(data[2])

        poll_id = user_sessions[user_id]["poll_session"]["poll_id"]
        poll = polls_data["polls"][poll_id]
        question = poll["questions"][q_idx]
        selected_option = question["options"][opt_idx]

        user_sessions[user_id]["poll_session"]["answers"].append({
            "question": question["text"],
            "answer": selected_option["text"],
            "weight": selected_option["weight"]
        })

        user_sessions[user_id]["poll_session"]["score"] += selected_option["weight"]

        if q_idx + 1 < len(poll["questions"]):
            user_sessions[user_id]["poll_session"]["current_q"] += 1
            await send_poll_question(update, context)
        else:
            score = user_sessions[user_id]["poll_session"]["score"]
            result = None

            for name, threshold in sorted(poll["thresholds"], key=lambda x: x[1], reverse=True):
                if score >= threshold:
                    result = name
                    break

            poll["views"] = poll.get("views", 0) + 1
            await save_polls(context)

            bot_username = (await context.bot.get_me()).username
            poll_link = f"https://t.me/{bot_username}?start=startpoll_{poll_id}"

            result_text = (
                f"üèÜ <b>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b> {result}\n\n"
                f"–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å: {poll_link}"
            )

            keyboard = [
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å", url=poll_link)],
                [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="main_menu")]
            ]

            if "result_images" in poll and result in poll["result_images"]:
                filepath = os.path.join(MEDIA_FOLDER, poll["result_images"][result]["local_path"])
                if os.path.exists(filepath):
                    await context.bot.send_photo(
                        chat_id=update.effective_chat.id,
                        photo=poll["result_images"][result]["file_id"],
                        caption=result_text,
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode="HTML"
                    )
                else:
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=result_text,
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode="HTML"
                    )
            else:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=result_text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="HTML"
                )

            if user_id in user_sessions:
                del user_sessions[user_id]
    except Exception as e:
        logger.error(f"Error in process_answer: {e}")
        await handle_error(update, context)

async def cancel_poll_session(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        if user_id in user_sessions and "poll_session" in user_sessions[user_id]:
            del user_sessions[user_id]["poll_session"]
        
        await update.callback_query.answer("‚ùå –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await start(update, context)
    except Exception as e:
        logger.error(f"Error in cancel_poll_session: {e}")
        await handle_error(update, context)

async def my_polls(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        my_polls = [
            (pid, poll) for pid, poll in polls_data["polls"].items()
            if poll.get("creator") == user_id
        ]
        if not my_polls:
            await update.callback_query.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø—Ä–æ—Å–æ–≤!", show_alert=True)
            await update.callback_query.edit_message_text(
                "üì≠ <b>–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.</b>",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="create_poll")],
                    [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="main_menu")]
                ]),
                parse_mode="HTML"
            )
            return

        keyboard = [
            [InlineKeyboardButton(
                f"üìã {poll['title']} ({len(poll['questions'])} –≤–æ–ø—Ä–æ—Å–æ–≤, {poll.get('views',0)} –ø—Ä–æ—Ö–æ–∂–¥.)",
                callback_data=f"my_poll_{pid}"
            )] for pid, poll in my_polls
        ]
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
        await update.callback_query.edit_message_text(
            "üóÇÔ∏è <b>–í–∞—à–∏ –æ–ø—Ä–æ—Å—ã:</b>",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in my_polls: {e}")
        await handle_error(update, context)

async def my_poll_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        poll_id = update.callback_query.data.split("_", 2)[-1]
        poll = polls_data["polls"].get(poll_id)
        if not poll or poll.get("creator") != user_id:
            await update.callback_query.answer("–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return

        bot_username = (await context.bot.get_me()).username
        poll_link = f"https://t.me/{bot_username}?start=startpoll_{poll_id}"

        keyboard = [
            [InlineKeyboardButton("üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –æ–ø—Ä–æ—Å–æ–º", callback_data=f"share_poll_{poll_id}")],
            [InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_poll_{poll_id}")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_confirm_{poll_id}")],  # –ò–∑–º–µ–Ω–∏–ª–∏ –ø—Ä–µ—Ñ–∏–∫—Å –∑–¥–µ—Å—å
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_polls")]
        ]
        await update.callback_query.edit_message_text(
            f"üìã <b>{poll['title']}</b>\n"
            f"üî¢ –í–æ–ø—Ä–æ—Å–æ–≤: {len(poll['questions'])}\n"
            f"üìä –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–π: {poll.get('views', 0)}\n\n"
            f"üîó –°—Å—ã–ª–∫–∞: <code>{poll_link}</code>",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error in my_poll_menu: {e}")
        await handle_error(update, context)

async def delete_poll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        poll_id = update.callback_query.data.split("_", 2)[-1]
        poll = polls_data["polls"].get(poll_id)
        if poll and poll.get("creator") == user_id:
            for question in poll.get("questions", []):
                if "image" in question and isinstance(question["image"], dict):
                    try:
                        os.remove(os.path.join(MEDIA_FOLDER, question["image"]["local_path"]))
                    except:
                        pass
            
            if "result_images" in poll:
                for result_name, image_data in poll["result_images"].items():
                    if isinstance(image_data, dict):
                        try:
                            os.remove(os.path.join(MEDIA_FOLDER, image_data["local_path"]))
                        except:
                            pass
            
            del polls_data["polls"][poll_id]
            await save_polls(context)
            await update.callback_query.answer("–û–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω!")
            await my_polls(update, context)
        else:
            await update.callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
    except Exception as e:
        logger.error(f"Error in delete_poll: {e}")
        await handle_error(update, context)

async def confirm_delete_poll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        poll_id = update.callback_query.data.split("_", 2)[-1]
        poll = polls_data["polls"].get(poll_id)
        
        if not poll:
            await update.callback_query.answer("–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        
        await update.callback_query.edit_message_text(
            f"‚ùå –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å?\n\n"
            f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {poll['title']}\n"
            f"üî¢ –í–æ–ø—Ä–æ—Å–æ–≤: {len(poll['questions'])}\n"
            f"üìä –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–π: {poll.get('views', 0)}\n\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_poll_{poll_id}")],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º delete_poll_ –∫–∞–∫ –ø—Ä–µ—Ñ–∏–∫—Å
                [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"my_poll_{poll_id}")]
            ])
        )
    except Exception as e:
        logger.error(f"Error in confirm_delete_poll: {e}")
        await handle_error(update, context)

async def delete_poll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        poll_id = update.callback_query.data.split("_", 2)[-1]
        poll = polls_data["polls"].get(poll_id)
        
        if poll and poll.get("creator") == user_id:
            for question in poll.get("questions", []):
                if "image" in question and isinstance(question["image"], dict):
                    try:
                        os.remove(os.path.join(MEDIA_FOLDER, question["image"]["local_path"]))
                    except:
                        pass
            
            if "result_images" in poll:
                for result_name, image_data in poll["result_images"].items():
                    if isinstance(image_data, dict):
                        try:
                            os.remove(os.path.join(MEDIA_FOLDER, image_data["local_path"]))
                        except:
                            pass
            
            del polls_data["polls"][poll_id]
            await save_polls(context)
            await update.callback_query.answer("–û–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω!")
            await my_polls(update, context)
        else:
            await update.callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
    except Exception as e:
        logger.error(f"Error in delete_poll: {e}")
        await handle_error(update, context)

async def edit_poll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        poll_id = update.callback_query.data.split("_", 2)[-1]
        poll = polls_data["polls"].get(poll_id)
        
        if not poll or poll.get("creator") != user_id:
            await update.callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
            return
        
        context.user_data["editing_poll_id"] = poll_id
        context.user_data["editing_poll"] = poll.copy()
        
        keyboard = [
            [InlineKeyboardButton("üìå –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_title")],
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã", callback_data="edit_questions")],
            [InlineKeyboardButton("üèÜ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="edit_results")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"my_poll_{poll_id}")]
        ]
        
        await update.callback_query.edit_message_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞:</b> {poll['title']}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
        return EDIT_CHOICE
    except Exception as e:
        logger.error(f"Error in edit_poll: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def edit_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
            ])
        )
        return EDIT_TITLE
    except Exception as e:
        logger.error(f"Error in edit_title: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def process_edit_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        new_title = update.message.text.strip()
        if len(new_title) > 100:
            await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ! –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
            return EDIT_TITLE
        
        poll_id = context.user_data["editing_poll_id"]
        polls_data["polls"][poll_id]["title"] = new_title
        await save_polls(context)
        
        await update.message.reply_text(
            "‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"edit_poll_{poll_id}")]
            ])
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in process_edit_title: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def edit_questions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        poll_id = context.user_data["editing_poll_id"]
        poll = polls_data["polls"][poll_id]
        
        keyboard = [
            [InlineKeyboardButton(
                f"{i+1}. {q['text'][:30]}..." if len(q['text']) > 30 else f"{i+1}. {q['text']}",
                callback_data=f"edit_question_{i}"
            )]
            for i, q in enumerate(poll["questions"])
        ]
        keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="add_question")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"edit_poll_{poll_id}")])
        
        await update.callback_query.edit_message_text(
            "üìù –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard))
        return EDIT_QUESTIONS
    except Exception as e:
        logger.error(f"Error in edit_questions: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def edit_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        poll_id = context.user_data["editing_poll_id"]
        question_idx = int(update.callback_query.data.split("_")[-1])
        question = polls_data["polls"][poll_id]["questions"][question_idx]
        
        context.user_data["editing_question_idx"] = question_idx
        
        keyboard = [
            [InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞", callback_data=f"edit_qtext_{question_idx}")],
            [InlineKeyboardButton("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data=f"edit_qimage_{question_idx}")],
            [InlineKeyboardButton("üìã –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤", callback_data=f"edit_qoptions_{question_idx}")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"delete_question_{question_idx}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="edit_questions")]
        ]
        
        await update.callback_query.edit_message_text(
            f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ {question_idx+1}:\n\n"
            f"{question['text']}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return EDIT_QUESTION
    except Exception as e:
        logger.error(f"Error in edit_question: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def edit_question_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        question_idx = int(update.callback_query.data.split("_")[-1])
        context.user_data["editing_question_idx"] = question_idx
        
        await update.callback_query.edit_message_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_question_{question_idx}")]
            ])
        )
        return EDIT_QUESTION
    except Exception as e:
        logger.error(f"Error in edit_question_text: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def process_edit_question_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        new_text = update.message.text.strip()
        if len(new_text) > 300:
            await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ú–∞–∫—Å–∏–º—É–º 300 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        
        poll_id = context.user_data["editing_poll_id"]
        question_idx = context.user_data["editing_question_idx"]
        polls_data["polls"][poll_id]["questions"][question_idx]["text"] = new_text
        await save_polls(context)
        
        await update.message.reply_text(
            "‚úÖ –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ö –≤–æ–ø—Ä–æ—Å—É", callback_data=f"edit_question_{question_idx}")]
            ])
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in process_edit_question_text: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def edit_question_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        question_idx = int(update.callback_query.data.split("_")[-1])
        context.user_data["editing_question_idx"] = question_idx
        
        await update.callback_query.edit_message_text(
            "üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–£–¥–∞–ª–∏—Ç—å':",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data=f"delete_qimage_{question_idx}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_question_{question_idx}")]
            ])
        )
        return EDIT_QUESTION
    except Exception as e:
        logger.error(f"Error in edit_question_image: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def process_edit_question_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        poll_id = context.user_data["editing_poll_id"]
        question_idx = context.user_data["editing_question_idx"]
        
        photo = max(update.message.photo, key=lambda p: p.file_size)
        filename = await save_file(photo.file_id, context)
        if filename:
            polls_data["polls"][poll_id]["questions"][question_idx]["image"] = {
                "file_id": photo.file_id,
                "local_path": filename
            }
            await save_polls(context)
        
        await update.message.reply_text(
            "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ö –≤–æ–ø—Ä–æ—Å—É", callback_data=f"edit_question_{question_idx}")]
            ])
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in process_edit_question_image: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def delete_question_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        question_idx = int(update.callback_query.data.split("_")[-1])
        poll_id = context.user_data["editing_poll_id"]
        
        if "image" in polls_data["polls"][poll_id]["questions"][question_idx]:
            try:
                os.remove(os.path.join(MEDIA_FOLDER, polls_data["polls"][poll_id]["questions"][question_idx]["image"]["local_path"]))
            except:
                pass
            del polls_data["polls"][poll_id]["questions"][question_idx]["image"]
            await save_polls(context)
            await update.callback_query.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
        else:
            await update.callback_query.answer("–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
        
        await update.callback_query.edit_message_text(
            "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ —É–¥–∞–ª–µ–Ω–æ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ö –≤–æ–ø—Ä–æ—Å—É", callback_data=f"edit_question_{question_idx}")]
            ])
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in delete_question_image: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def edit_question_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        question_idx = int(update.callback_query.data.split("_")[-1])
        poll_id = context.user_data["editing_poll_id"]
        question = polls_data["polls"][poll_id]["questions"][question_idx]
        
        context.user_data["editing_question_idx"] = question_idx
        
        options_text = "\n".join(
            f"{i+1}. {opt['text']} ({'+' if opt['weight'] >= 0 else ''}{opt['weight']})"
            for i, opt in enumerate(question["options"])
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã", callback_data=f"edit_qoptions_full_{question_idx}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"edit_question_{question_idx}")]
        ]
        
        await update.callback_query.edit_message_text(
            f"üìã –¢–µ–∫—É—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n\n{options_text}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:",
            reply_markup=InlineKeyboardMarkup(keyboard))
        
        return EDIT_OPTIONS
    except Exception as e:
        logger.error(f"Error in edit_question_options: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def edit_question_options_full(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        question_idx = int(update.callback_query.data.split("_")[-1])
        poll_id = context.user_data["editing_poll_id"]
        question = polls_data["polls"][poll_id]["questions"][question_idx]
        
        await update.callback_query.edit_message_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, —Ñ–æ—Ä–º–∞—Ç: –¢–µ–∫—Å—Ç|–ë–∞–ª–ª—ã):\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "–î–∞|2\n"
            "–ù–µ—Ç|-1\n"
            "–ù–µ –∑–Ω–∞—é|0",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_qoptions_{question_idx}")]
            ])
        )
        return EDIT_OPTIONS
    except Exception as e:
        logger.error(f"Error in edit_question_options_full: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def process_edit_question_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        options = []
        for line in update.message.text.split("\n"):
            if line.strip() and "|" in line:
                text, weight = line.split("|", 1)
                options.append({"text": text.strip(), "weight": int(weight.strip())})

        if len(options) < 2:
            raise ValueError("‚ùï –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞")
        if len(options) > 10:
            raise ValueError("‚ùï –ú–∞–∫—Å–∏–º—É–º 10 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞")

        poll_id = context.user_data["editing_poll_id"]
        question_idx = context.user_data["editing_question_idx"]
        polls_data["polls"][poll_id]["questions"][question_idx]["options"] = options
        await save_polls(context)

        await update.message.reply_text(
            "‚úÖ –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ö –≤–æ–ø—Ä–æ—Å—É", callback_data=f"edit_question_{question_idx}")]
            ])
        )
        return ConversationHandler.END

    except ValueError as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return EDIT_OPTIONS
    except Exception as e:
        logger.error(f"Error in process_edit_question_options: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def delete_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        question_idx = int(update.callback_query.data.split("_")[-1])
        poll_id = context.user_data["editing_poll_id"]
        
        if len(polls_data["polls"][poll_id]["questions"]) <= 4:
            await update.callback_query.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å - –º–∏–Ω–∏–º—É–º 4 –≤–æ–ø—Ä–æ—Å–∞!", show_alert=True)
            return
        
        if "image" in polls_data["polls"][poll_id]["questions"][question_idx]:
            try:
                os.remove(os.path.join(MEDIA_FOLDER, polls_data["polls"][poll_id]["questions"][question_idx]["image"]["local_path"]))
            except:
                pass
        
        del polls_data["polls"][poll_id]["questions"][question_idx]
        await save_polls(context)
        
        await update.callback_query.edit_message_text(
            "‚úÖ –í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="edit_questions")]
            ])
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in delete_question: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def add_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        poll_id = context.user_data["editing_poll_id"]
        poll = polls_data["polls"][poll_id]
        
        if len(poll["questions"]) >= 30:
            await update.callback_query.answer("‚ùå –ú–∞–∫—Å–∏–º—É–º 30 –≤–æ–ø—Ä–æ—Å–æ–≤!", show_alert=True)
            return
        
        context.user_data["adding_question"] = True
        context.user_data["question_number"] = len(poll["questions"]) + 1
        
        await update.callback_query.edit_message_text(
            f"üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ {context.user_data['question_number']}:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_questions")]
            ])
        )
        return QUESTION
    except Exception as e:
        logger.error(f"Error in add_question: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def edit_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        poll_id = context.user_data["editing_poll_id"]
        poll = polls_data["polls"][poll_id]
        
        results_text = "\n".join(
            f"{name}: –æ—Ç {score} –±–∞–ª–ª–æ–≤"
            for name, score in poll["thresholds"]
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="edit_results_full")],
            [InlineKeyboardButton("üñºÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="edit_result_images")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"edit_poll_{poll_id}")]
        ]
        
        await update.callback_query.edit_message_text(
            f"üèÜ –¢–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n\n{results_text}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–ª–∏ –∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return EDIT_RESULTS
    except Exception as e:
        logger.error(f"Error in edit_results: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def edit_results_full(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        poll_id = context.user_data["editing_poll_id"]
        poll = polls_data["polls"][poll_id]
        
        min_score = sum(min(opt["weight"] for opt in q["options"]) for q in poll["questions"])
        max_score = sum(max(opt["weight"] for opt in q["options"]) for q in poll["questions"])
        
        await update.callback_query.edit_message_text(
            f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, —Ñ–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ|–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª):\n\n"
            f"–î–∏–∞–ø–∞–∑–æ–Ω –≤–æ–∑–º–æ–∂–Ω—ã—Ö –±–∞–ª–ª–æ–≤: –æ—Ç {min_score} –¥–æ {max_score}\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "–û—Ç–ª–∏—á–Ω–æ|15\n"
            "–•–æ—Ä–æ—à–æ|10\n"
            "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ|5",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_results")]
            ])
        )
        return EDIT_RESULTS
    except Exception as e:
        logger.error(f"Error in edit_results_full: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def process_edit_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        thresholds = []
        for line in update.message.text.split("\n"):
            if line.strip() and "|" in line:
                name, score = line.split("|", 1)
                thresholds.append((name.strip(), int(score.strip())))

        poll_id = context.user_data["editing_poll_id"]
        poll = polls_data["polls"][poll_id]
        
        min_score = sum(min(opt["weight"] for opt in q["options"]) for q in poll["questions"])
        max_score = sum(max(opt["weight"] for opt in q["options"]) for q in poll["questions"])

        if len(thresholds) < 1:
            raise ValueError(f"‚ùï –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 1 —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        if len(thresholds) > 12:
            raise ValueError(f"‚ùï –ú–∞–∫—Å–∏–º—É–º 12 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

        thresholds.sort(key=lambda x: x[1], reverse=True)

        if thresholds[0][1] > max_score:
            raise ValueError(f"‚ùï –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ {thresholds[0][1]} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–π –º–∞–∫—Å–∏–º—É–º {max_score}")
        if thresholds[-1][1] < min_score:
            raise ValueError(f"‚ùï –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ {thresholds[-1][1]} –Ω–∏–∂–µ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞ {min_score}")

        for i in range(1, len(thresholds)):
            if thresholds[i-1][1] <= thresholds[i][1]:
                raise ValueError("‚ùï –ü–æ—Ä–æ–≥–∏ –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –≤ —É–±—ã–≤–∞—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ")

        if thresholds[-1][1] > min_score:
            thresholds.append(("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç", min_score))

        result_images = {}
        if "result_images" in poll:
            for name, score in thresholds:
                if name in poll["result_images"]:
                    result_images[name] = poll["result_images"][name]

        polls_data["polls"][poll_id]["thresholds"] = thresholds
        polls_data["polls"][poll_id]["result_images"] = result_images
        await save_polls(context)

        await update.message.reply_text(
            "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"edit_poll_{poll_id}")]
            ])
        )
        return ConversationHandler.END

    except ValueError as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return EDIT_RESULTS
    except Exception as e:
        logger.error(f"Error in process_edit_results: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def edit_result_images(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        poll_id = context.user_data["editing_poll_id"]
        poll = polls_data["polls"][poll_id]
        
        context.user_data["editing_result_idx"] = 0
        result_name = poll["thresholds"][0][0]
        
        await update.callback_query.edit_message_text(
            f"üñºÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {result_name}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_edit_result_image")],
                [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="delete_result_image")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_results")]
            ])
        )
        return RESULT_IMAGE
    except Exception as e:
        logger.error(f"Error in edit_result_images: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def cancel_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        poll_id = context.user_data.get("editing_poll_id")
        if poll_id:
            await update.callback_query.edit_message_text(
                "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –æ–ø—Ä–æ—Å—É", callback_data=f"my_poll_{poll_id}")]
                ])
            )
        else:
            await update.callback_query.edit_message_text(
                "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        
        if "editing_poll_id" in context.user_data:
            del context.user_data["editing_poll_id"]
        if "editing_poll" in context.user_data:
            del context.user_data["editing_poll"]
        
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in cancel_edit: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def post_add_at_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.effective_user.id != ADMIN_ID:
            await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
            return
        
        context.user_data["awaiting_message"] = True
        
        await update.message.reply_text(
            "üïí –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_scheduled_post")]
            ])
        )
        return AWAITING_MESSAGE
    except Exception as e:
        logger.error(f"Error in post_add_at_time: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def process_scheduled_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.effective_user.id != ADMIN_ID:
            return
        
        if "awaiting_message" not in context.user_data:
            return
        
        message_data = {
            "content_type": "text",
            "content_text": update.message.text or update.message.caption,
            "content_file_id": None
        }
        
        if update.message.photo:
            photo = max(update.message.photo, key=lambda p: p.file_size)
            message_data["content_type"] = "photo"
            message_data["content_file_id"] = photo.file_id
        elif update.message.video:
            message_data["content_type"] = "video"
            message_data["content_file_id"] = update.message.video.file_id
        elif update.message.document:
            message_data["content_type"] = "document"
            message_data["content_file_id"] = update.message.document.file_id
        
        context.user_data["scheduled_message"] = message_data
        context.user_data["awaiting_time"] = True
        del context.user_data["awaiting_message"]
        
        await update.message.reply_text(
            "‚è∞ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.05.2025 14:30",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_scheduled_post")]
            ])
        )
        return AWAITING_TIME
    except Exception as e:
        logger.error(f"Error in process_scheduled_message: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def process_scheduled_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.effective_user.id != ADMIN_ID:
            return
        
        if "awaiting_time" not in context.user_data:
            return
        
        try:
            time_str = update.message.text.strip()
            publish_time = datetime.strptime(time_str, "%d.%m.%Y %H:%M")
            
            now = datetime.now()
            if publish_time <= now:
                await update.message.reply_text("‚ö†Ô∏è –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!")
                return AWAITING_TIME
            
            message_data = context.user_data["scheduled_message"]
            post_id = add_scheduled_post(
                message_data["content_type"],
                message_data["content_text"],
                message_data["content_file_id"],
                time_str
            )
            
            delay = (publish_time - now).total_seconds()
            context.job_queue.run_once(
                callback=publish_scheduled_message,
                when=delay,
                data={"post_id": post_id},
                name=f"scheduled_post_{post_id}"
            )
            
            del context.user_data["awaiting_time"]
            del context.user_data["scheduled_message"]
            
            await update.message.reply_text(
                f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {time_str} (ID: {post_id})",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            return ConversationHandler.END
        
        except ValueError:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")
            return AWAITING_TIME
    except Exception as e:
        logger.error(f"Error in process_scheduled_time: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def publish_scheduled_message(context: ContextTypes.DEFAULT_TYPE):
    try:
        job = context.job
        post_id = job.data["post_id"]
        
        conn = sqlite3.connect(DATABASE_FILE)
        cursor = conn.cursor()
        
        cursor.execute('''
        SELECT content_type, content_text, content_file_id 
        FROM scheduled_posts 
        WHERE post_id = ? AND status = 'pending'
        ''', (post_id,))
        
        post_data = cursor.fetchone()
        if not post_data:
            logger.error(f"Scheduled post {post_id} not found or already sent")
            return
        
        content_type, content_text, content_file_id = post_data
        
        users = get_all_users()
        success = 0
        failures = 0
        
        for user_id in users:
            try:
                if content_type == "photo":
                    await context.bot.send_photo(
                        chat_id=user_id,
                        photo=content_file_id,
                        caption=content_text
                    )
                elif content_type == "video":
                    await context.bot.send_video(
                        chat_id=user_id,
                        video=content_file_id,
                        caption=content_text
                    )
                elif content_type == "document":
                    await context.bot.send_document(
                        chat_id=user_id,
                        document=content_file_id,
                        caption=content_text
                    )
                else:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=content_text
                    )
                success += 1
            except Exception as e:
                logger.error(f"Failed to send post {post_id} to {user_id}: {e}")
                failures += 1
        
        mark_post_as_sent(post_id)
        conn.close()
        
        report = (
            f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (ID: {post_id})\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {failures}"
        )
        
        try:
            await context.bot.send_message(chat_id=ADMIN_ID, text=report)
        except Exception as e:
            logger.error(f"Failed to send report to admin: {e}")
    except Exception as e:
        logger.error(f"Error in publish_scheduled_message: {e}")

async def cancel_scheduled_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if update.effective_user.id != ADMIN_ID:
            await update.callback_query.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        if "awaiting_message" in context.user_data:
            del context.user_data["awaiting_message"]
        if "awaiting_time" in context.user_data:
            del context.user_data["awaiting_time"]
        if "scheduled_message" in context.user_data:
            del context.user_data["scheduled_message"]
        
        await update.callback_query.answer("‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await update.callback_query.edit_message_text(
            "üóëÔ∏è –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in cancel_scheduled_post: {e}")
        await handle_error(update, context)
        return ConversationHandler.END

async def restore_scheduled_jobs(application: Application):
    try:
        pending_posts = get_pending_posts()
        now = datetime.now()
        
        for post in pending_posts:
            try:
                post_time = datetime.strptime(post["scheduled_time"], "%d.%m.%Y %H:%M")
                
                if post_time <= now:
                    mark_post_as_sent(post["post_id"])
                    continue
                
                delay = (post_time - now).total_seconds()
                
                application.job_queue.run_once(
                    callback=publish_scheduled_message,
                    when=delay,
                    data={"post_id": post["post_id"]},
                    name=f"scheduled_post_{post['post_id']}"
                )
                
                logger.info(f"Restored scheduled post {post['post_id']} for {post['scheduled_time']}")
            
            except Exception as e:
                logger.error(f"Failed to restore post {post['post_id']}: {e}")
    except Exception as e:
        logger.error(f"Error in restore_scheduled_jobs: {e}")

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

def setup_handlers(application):
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(create_poll, pattern="^create_poll$")],
        states={
            TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_title)],
            QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_question)],
            QUESTION_IMAGE: [
                MessageHandler(filters.PHOTO, process_question_image),
                CallbackQueryHandler(process_question_image, pattern="^skip_image$")
            ],
            OPTIONS: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_options)],
            NEXT_QUESTION: [
                CallbackQueryHandler(next_question, pattern="^next_question$"),
                CallbackQueryHandler(to_results, pattern="^to_results$"),
                CallbackQueryHandler(need_more_questions, pattern="^need_more_questions$")
            ],
            RESULTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_results)],
            RESULT_IMAGE: [
                MessageHandler(filters.PHOTO, process_result_image),
                CallbackQueryHandler(process_result_image, pattern="^skip_result_image$")
            ],
            CONFIRM: [
                CallbackQueryHandler(save_poll, pattern="^save_poll$"),
                CallbackQueryHandler(cancel_poll, pattern="^cancel_poll$")
            ]
        },
        fallbacks=[
            CommandHandler("cancel", cancel_poll),
            CallbackQueryHandler(cancel_poll, pattern="^cancel_poll$")
        ],
        per_message=False
    )

    edit_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(edit_poll, pattern="^edit_poll_")],
        states={
            EDIT_CHOICE: [
                CallbackQueryHandler(edit_title, pattern="^edit_title$"),
                CallbackQueryHandler(edit_questions, pattern="^edit_questions$"),
                CallbackQueryHandler(edit_results, pattern="^edit_results$"),
                CallbackQueryHandler(cancel_edit, pattern="^cancel_edit$")
            ],
            EDIT_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_edit_title)],
            EDIT_QUESTIONS: [
                CallbackQueryHandler(edit_question, pattern=r"^edit_question_\d+$"),
                CallbackQueryHandler(add_question, pattern="^add_question$"),
                CallbackQueryHandler(cancel_edit, pattern="^cancel_edit$")
            ],
            EDIT_QUESTION: [
                CallbackQueryHandler(edit_question_text, pattern=r"^edit_qtext_\d+$"),
                CallbackQueryHandler(edit_question_image, pattern=r"^edit_qimage_\d+$"),
                CallbackQueryHandler(edit_question_options, pattern=r"^edit_qoptions_\d+$"),
                CallbackQueryHandler(delete_question, pattern=r"^delete_question_\d+$"),
                CallbackQueryHandler(cancel_edit, pattern="^cancel_edit$")
            ],
            EDIT_OPTIONS: [
                CallbackQueryHandler(edit_question_options_full, pattern=r"^edit_qoptions_full_\d+$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, process_edit_question_options),
                CallbackQueryHandler(cancel_edit, pattern="^cancel_edit$")
            ],
            EDIT_RESULTS: [
                CallbackQueryHandler(edit_results_full, pattern="^edit_results_full$"),
                CallbackQueryHandler(edit_result_images, pattern="^edit_result_images$"),
                CallbackQueryHandler(cancel_edit, pattern="^cancel_edit$")
            ],
            RESULT_IMAGE: [
                MessageHandler(filters.PHOTO, process_result_image),
                CallbackQueryHandler(process_result_image, pattern="^skip_edit_result_image$"),
                CallbackQueryHandler(delete_question_image, pattern="^delete_result_image$"),
                CallbackQueryHandler(cancel_edit, pattern="^cancel_edit$")
            ]
        },
        fallbacks=[
            CommandHandler("cancel", cancel_edit),
            CallbackQueryHandler(cancel_edit, pattern="^cancel_edit$")
        ],
        per_message=False
    )

    post_conv = ConversationHandler(
        entry_points=[CommandHandler("postaddattime", post_add_at_time, filters.User(ADMIN_ID))],
        states={
            AWAITING_MESSAGE: [
                MessageHandler(
                    (filters.TEXT | filters.PHOTO | filters.VIDEO | filters.Document.ALL),
                    process_scheduled_message
                )
            ],
            AWAITING_TIME: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND & filters.Regex(r"\d{2}\.\d{2}\.\d{4} \d{2}:\d{2}"),
                    process_scheduled_time
                )
            ]
        },
        fallbacks=[
            CallbackQueryHandler(cancel_scheduled_post, pattern="^cancel_scheduled_post$")
        ],
        per_message=True
    )

    share_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(share_poll, pattern=r"^share_poll_")],
        states={
            SHARE_POLL: [
                CallbackQueryHandler(share_with_image, pattern="^share_with_image$"),
                CallbackQueryHandler(share_without_image, pattern="^share_without_image$"),
                CallbackQueryHandler(cancel_share, pattern="^cancel_share$")
            ],
            SHARE_WITH_IMAGE: [
                MessageHandler(filters.PHOTO, process_share_image),
                CallbackQueryHandler(cancel_share, pattern="^cancel_share$")
            ]
        },
        fallbacks=[
            CommandHandler("cancel", cancel_share),
            CallbackQueryHandler(cancel_share, pattern="^cancel_share$")
        ],
        per_message=True
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(start, pattern="^main_menu$"))
    application.add_handler(CallbackQueryHandler(list_polls, pattern="^list_polls$"))
    application.add_handler(CallbackQueryHandler(start_poll, pattern="^start_poll_"))
    application.add_handler(CallbackQueryHandler(process_answer, pattern=r"^answer_\d+_\d+$"))
    application.add_handler(CallbackQueryHandler(my_polls, pattern="^my_polls$"))
    application.add_handler(CallbackQueryHandler(my_poll_menu, pattern="^my_poll_"))
    application.add_handler(CallbackQueryHandler(delete_poll, pattern="^delete_poll_"))
    application.add_handler(CallbackQueryHandler(cancel_poll_session, pattern="^cancel_poll_session$"))
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("menu", menu))
    application.add_handler(CallbackQueryHandler(confirm_delete_poll, pattern="^delete_confirm_"))  # –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    application.add_handler(CallbackQueryHandler(delete_poll, pattern="^delete_poll_"))
    
    application.add_handler(conv_handler)
    application.add_handler(edit_conv)
    application.add_handler(post_conv)
    application.add_handler(share_conv)

async def on_startup(application: Application):
    await set_commands(application)
    try:
        load_polls()
        await restore_scheduled_jobs(application)
        logger.info("Bot started and scheduled jobs restored")
    except Exception as e:
        logger.error(f"Error in on_startup: {e}")

def main():
    try:
        init_db()
        
        application = Application.builder().token(TOKEN).post_init(on_startup).build()
        setup_handlers(application)
        
        application.run_polling()
    except Exception as e:
        logger.error(f"Error in main: {e}")

if __name__ == "__main__":
    main()